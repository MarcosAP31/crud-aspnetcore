@using Entities
@using Business
@inject NavigationManager NavManager
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title"><i class="fa fa-list"></i> Edit Client</h6>
                <button type="button" style="border:1px solid #d0d4d9;" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="oClientUpd">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Name:</span>
                                <InputText @bind-Value="oClientUpd.Name" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">LastName:</span>
                                <InputText @bind-Value="oClientUpd.LastName" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Birthday:</span>
                                <InputDate @bind-Value="oClientUpd.Birthday" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Sex:</span>
                                <InputSelect @bind-Value="oClientUpd.Sex" class="form-control">
                                    <option>Seleccione el sexo</option>
                                    <option value="Masculino">Masculino</option>
                                    <option value="Femenino">Femenino</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Department:</span>
                                <InputText @bind-Value="oClientUpd.Department" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Province:</span>
                                <InputText @bind-Value="oClientUpd.Province" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">District:</span>
                                <InputText @bind-Value="oClientUpd.District" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Direction:</span>
                                <InputText @bind-Value="oClientUpd.Direction" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1">Image:</span>
                                <InputFile OnChange="HandleFileSelected" class="form-control" />
                            </div>
                            <!-- Display image preview -->
                            @if (imageData != null)
                            {
                                <div>
                                    <p>Image Preview:</p>
                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(imageData)}")" alt="Image Preview" style="max-width: 100%; max-height: 200px; margin-top: 10px;" />
                                </div>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalOk"><i class="fa fa-save"></i>Edit</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int clientid { get; set; }
    Client oClientUpd = new Client();
    private byte[] imageData;

    protected override async Task OnInitializedAsync()
    {
        oClientUpd = B_Client.ClientById(clientid);

        // Set imageData to the existing image data
        imageData = oClientUpd.ProfileImage;


    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            oClientUpd.ImageFileName = file.Name; // Set the file name
                                                  // Read the selected file into a byte array
            using (var stream = file.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    imageData = memoryStream.ToArray();
                }
            }
            // Trigger a UI update
            StateHasChanged();
        }
    }
    private void UpdateClient()
    {
        oClientUpd.ProfileImage = imageData;
        B_Client.CreateClient(oClientUpd, oClientUpd.ProfileImage, oClientUpd.ImageFileName);
        NavManager.NavigateTo("client/list");
    }
    private void DeleteClient()
    {
        B_Client.DeleteClient(oClientUpd);
        NavManager.NavigateTo("client/list");
    }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        if (imageData != null)
        {
            // If a new image is loaded, update the client with the new image
            oClientUpd.ProfileImage = imageData;
            B_Client.UpdateClient(oClientUpd, oClientUpd.ProfileImage, oClientUpd.ImageFileName);
            
        }
        else
        {
            // If no new image is loaded, update the client without changing the image
            B_Client.UpdateClientWithoutImage(oClientUpd);
        }
        // Ensure StateHasChanged is called after the update operation
        StateHasChanged();
        return OnClose.InvokeAsync(true);
    }
}

